name: Plugin Build

on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main
    tags:
      - '*'
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main

env:
  PLUGIN_NAME: 'obs-backgroundremoval'

jobs:
  clang_check:
    name: 01 - Code Format Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install clang-format
        run: sudo apt-get install -y clang-format-13

      - name: Run clang-format
        run: ./.github/scripts/check-format.sh && ./.github/scripts/check-changes.sh

      - name: Install cmake-format
        run: sudo pip install cmakelang

      - name: Run cmake-format
        run: ./.github/scripts/check-cmake.sh

  macos_build:
    name: 02 - macOS
    runs-on: macos-12
    strategy:
      fail-fast: true
      matrix:
        arch: [x86_64, arm64]
    if: always()
    needs: [clang_check]
    outputs:
      commitHash: ${{ steps.setup.outputs.commitHash }}
    env:
      CODESIGN_IDENT: '-'
      CODESIGN_IDENT_INSTALLER: ''
      MACOSX_DEPLOYMENT_TARGET: '10.15'
    defaults:
      run:
        shell: zsh {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: plugin
          submodules: recursive

      - name: Checkout obs-studio
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: obs-studio
          fetch-depth: 0
          submodules: recursive

      - name: Setup Environment
        id: setup
        working-directory: ${{ github.workspace }}/plugin
        run: |
          ## SETUP ENVIRONMENT SCRIPT
          print '::group::Clean Homebrew Environment'
          typeset -a to_remove=()

          for formula (speexdsp curl php) {
            if [[ -d ${HOMEBREW_PREFIX}/opt/${formula} ]] to_remove+=(${formula})
          }

          if (( #to_remove > 0 )) brew uninstall --ignore-dependencies ${to_remove}
          print '::endgroup::'

          print '::group::Set up code signing'
          if [[ '${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_CERT }}' != '' ]] {
            echo 'haveCodesignIdent=true' >> "$GITHUB_OUTPUT"
            echo "found signing information"
          } else {
            echo 'haveCodesignIdent=false' >> "$GITHUB_OUTPUT"
            echo "signing information not found"
          }

          if [[ '${{ secrets.MACOS_NOTARIZATION_USERNAME }}' != '' && \
                '${{ secrets.MACOS_NOTARIZATION_PASSWORD }}' != '' ]] {
            echo 'haveNotarizationUser=true' >> "$GITHUB_OUTPUT"
            echo "found notarization user"
          } else {
            echo 'haveNotarizationUser=false' >> "$GITHUB_OUTPUT"
            echo "notarization user not found"
          }
          print '::endgroup::'

          print "ccacheDate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          print "commitHash=${"$(git rev-parse HEAD)"[0,9]}" >> $GITHUB_OUTPUT

      - name: Restore Compilation Cache
        id: ccache-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: macos-${{ matrix.arch }}-ccache-plugin-${{ hashFiles('plugin/CMakeLists.txt', 'plugin/cmake/*.cmake') }}

      - name: Install Apple Developer Certificate
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: Set Signing Identity
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        run: |
          print "CODESIGN_IDENT=${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" >> $GITHUB_ENV
          print "CODESIGN_IDENT_INSTALLER=${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}" >> $GITHUB_ENV

      - name: Build Plugin
        uses: ./plugin/.github/actions/build-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo
          codesign: 'true'
          codesignIdent: ${{ env.CODESIGN_IDENT }}

      - name: Archive Artifact
        working-directory: ${{ github.workspace }}/plugin/release/
        run: tar -cf ${{ env.PLUGIN_NAME }}-macos-${{ matrix.arch }}.tar.gz ${{ env.PLUGIN_NAME }}.plugin

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-macos-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}
          path: |
            ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}-macos-${{ matrix.arch }}.tar.gz
            ${{ github.workspace }}/plugin/build_${{ matrix.arch }}/installer-macos.generated.pkgproj

  macos_package:
    name: 02 - macOS (package)
    runs-on: macos-12
    needs: [macos_build]
    outputs:
      commitHash: ${{ steps.setup.outputs.commitHash }}
    env:
      CODESIGN_IDENT: '-'
      CODESIGN_IDENT_INSTALLER: ''
      MACOSX_DEPLOYMENT_TARGET: '10.15'
    defaults:
      run:
        shell: zsh {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: plugin
          submodules: recursive

      - name: Setup Environment
        id: setup
        working-directory: ${{ github.workspace }}/plugin
        run: |
          ## SETUP ENVIRONMENT SCRIPT
          print '::group::Clean Homebrew Environment'
          typeset -a to_remove=()

          for formula (speexdsp curl php) {
            if [[ -d ${HOMEBREW_PREFIX}/opt/${formula} ]] to_remove+=(${formula})
          }

          if (( #to_remove > 0 )) brew uninstall --ignore-dependencies ${to_remove}
          print '::endgroup::'

          print '::group::Set up code signing'
          if [[ '${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_CERT }}' != '' ]] {
            print 'haveCodesignIdent=true' >> $GITHUB_OUTPUT
          } else {
            print 'haveCodesignIdent=false' >> $GITHUB_OUTPUT
          }

          if [[ '${{ secrets.MACOS_NOTARIZATION_USERNAME }}' != '' && \
                '${{ secrets.MACOS_NOTARIZATION_PASSWORD }}' != '' ]] {
            print 'haveNotarizationUser=true' >> $GITHUB_OUTPUT
          } else {
            print 'haveNotarizationUser=false' >> $GITHUB_OUTPUT
          }
          print '::endgroup::'

          print "ccacheDate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          print "commitHash=${"$(git rev-parse HEAD)"[0,9]}" >> $GITHUB_OUTPUT

      - name: Install Apple Developer Certificate
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: Set Signing Identity
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        run: |
          print "CODESIGN_IDENT=${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" >> $GITHUB_ENV
          print "CODESIGN_IDENT_INSTALLER=${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}" >> $GITHUB_ENV

      - name: Download x86_64 build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-macos-x86_64-${{ steps.setup.outputs.commitHash }}
          path: ${{ github.workspace }}/plugin

      - name: Extract x86_64 build artifact
        working-directory: ${{ github.workspace }}/plugin/release
        run: tar -xzf ${{ env.PLUGIN_NAME }}-macos-x86_64.tar.gz

      - working-directory: ${{ github.workspace }}/plugin
        run: |
          mkdir -p build_arm64 build_universal

      - name: Place pkgproj
        working-directory: ${{ github.workspace }}/plugin
        run: |
          cp build_x86_64/installer-macos.generated.pkgproj build_arm64/
          cp build_x86_64/installer-macos.generated.pkgproj build_universal/

      - name: Package x86_64 Plugin
        if: false
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: x86_64
          config: RelWithDebInfo
          codesign: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
          notarize: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && steps.setup.outputs.haveNotarizationUser == 'true' }}
          codesignIdent: ${{ env.CODESIGN_IDENT }}
          installerIdent: ${{ env.CODESIGN_IDENT_INSTALLER }}
          codesignUser: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          codesignPass: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}

      - name: Extract x86_64 bundle
        working-directory: ${{ github.workspace }}/plugin
        run: mv release/${{ env.PLUGIN_NAME }}.plugin/Contents/MacOS/${{ env.PLUGIN_NAME }} release/${{ env.PLUGIN_NAME }}-x86_64

      - name: Remove x86_64 build artifact
        run: rm -rf ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}.plugin

      - name: Download ARM64 build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-macos-arm64-${{ steps.setup.outputs.commitHash }}
          path: ${{ github.workspace }}/plugin

      - name: Extract ARM64 build artifact
        working-directory: ${{ github.workspace }}/plugin/release
        run: tar -xzf ${{ env.PLUGIN_NAME }}-macos-arm64.tar.gz

      - name: Package ARM64 Plugin
        if: false
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: arm64
          config: RelWithDebInfo
          codesign: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
          notarize: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && steps.setup.outputs.haveNotarizationUser == 'true' }}
          codesignIdent: ${{ env.CODESIGN_IDENT }}
          installerIdent: ${{ env.CODESIGN_IDENT_INSTALLER }}
          codesignUser: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          codesignPass: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}

      - name: Extract arm64 bundle
        working-directory: ${{ github.workspace }}/plugin
        run: mv release/${{ env.PLUGIN_NAME }}.plugin/Contents/MacOS/${{ env.PLUGIN_NAME }} release/${{ env.PLUGIN_NAME }}-arm64

      - name: Create universal bundle
        working-directory: ${{ github.workspace }}/plugin/release
        run: lipo -create ${{ env.PLUGIN_NAME }}-x86_64 ${{ env.PLUGIN_NAME }}-arm64 -output ${{ env.PLUGIN_NAME }}.plugin/Contents/MacOS/${{ env.PLUGIN_NAME }}

      - name: Package Universal Plugin
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: universal
          config: RelWithDebInfo
          codesign: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
          notarize: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && steps.setup.outputs.haveNotarizationUser == 'true' }}
          codesignIdent: ${{ env.CODESIGN_IDENT }}
          installerIdent: ${{ env.CODESIGN_IDENT_INSTALLER }}
          codesignUser: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          codesignPass: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}

      - name: Upload Installer Artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-macos-all-${{ steps.setup.outputs.commitHash }}
          path: ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}-*-macos-*.pkg

  linux_build:
    name: 02 - Linux
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        arch: [x86_64]
    if: always()
    needs: [clang_check]
    outputs:
      commitHash: ${{ steps.setup.outputs.commitHash }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: plugin
          submodules: recursive

      - name: Checkout obs-studio
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: obs-studio
          fetch-depth: 0
          submodules: recursive

      - name: Setup Environment
        working-directory: ${{ github.workspace }}/plugin
        id: setup
        run: |
          ## SETUP ENVIRONMENT SCRIPT
          echo "ccacheDate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "commitHash=$(git rev-parse HEAD | cut -c1-9)" >> $GITHUB_OUTPUT

      - name: Restore Compilation Cache
        id: ccache-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: linux-${{ matrix.arch }}-ccache-plugin-${{ hashFiles('plugin/CMakeLists.txt', 'plugin/cmake/*.cmake') }}

      - name: Build Plugin
        uses: ./plugin/.github/actions/build-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo

      - name: Package Plugin
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo

      - name: Upload Build Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-linux-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}
          path: ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}-*-linux-${{ matrix.arch }}.*

  windows_build:
    name: 02 - Windows
    runs-on: windows-2022
    strategy:
      fail-fast: true
      matrix:
        arch: [x64]
    if: always()
    needs: [clang_check]
    outputs:
      commitHash: ${{ steps.setup.outputs.commitHash }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Support longpaths
        run: |
          git config --system core.longpaths true
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: plugin
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install ccache
        run: |
          Invoke-WebRequest https://github.com/ccache/ccache/releases/download/v4.7.4/ccache-4.7.4-windows-x86_64.zip -OutFile ${{ github.workspace }}/ccache-4.7.4-windows-x86_64.zip
          Expand-Archive -Path ccache-4.7.4-windows-x86_64.zip -DestinationPath ${{ github.workspace }}
          "${{ github.workspace }}/ccache-4.7.4-windows-x86_64" >> $Env:GITHUB_PATH

      - name: Setup ccache
        run: |
          ccache --version
          ccache --set-config=cache_dir="${{ github.workspace }}/.ccache"
          ccache --set-config=max_size="4096M"
          ccache --set-config=compression=true
          ccache -z

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout obs-studio
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: obs-studio
          fetch-depth: 0
          submodules: recursive

      - name: Setup Environment
        working-directory: ${{ github.workspace }}/plugin
        id: setup
        run: |
          ## SETUP ENVIRONMENT SCRIPT
          $ccacheDate = Get-Date -Format "yyyy-MM-dd"
          "ccacheDate=$ccacheDate" >> $env:GITHUB_OUTPUT
          $CommitHash = (git rev-parse HEAD)[0..8] -join ''
          "commitHash=${CommitHash}" >> $env:GITHUB_OUTPUT

      - name: Restore Compilation Cache
        id: ccache-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: windows-${{ matrix.arch }}-ccache-plugin-${{ hashFiles('plugin/CMakeLists.txt', 'plugin/cmake/*.cmake') }}

      - name: Build Plugin
        uses: ./plugin/.github/actions/build-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo
          visualStudio: 'Visual Studio 17 2022'

      - name: Package Plugin
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo

      - name: Upload Build Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-windows-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}
          path: ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}-*.zip

      - name: Package Plugin Installer
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
        uses: ./plugin/.github/actions/package-plugin
        with:
          workingDirectory: ${{ github.workspace }}/plugin
          target: ${{ matrix.arch }}
          config: RelWithDebInfo
          createInstaller: true

      - name: Upload Installer Artifact
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-windows-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}-installer
          path: ${{ github.workspace }}/plugin/release/${{ env.PLUGIN_NAME }}-*.exe

  make-release:
    name: 03 - Create and upload release
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [macos_package, linux_build, windows_build]
    defaults:
      run:
        shell: bash
    permissions:
      contents: write
    steps:
      - name: Get Metadata
        id: metadata
        run: |
          ## METADATA SCRIPT
          echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Generate Checksums
        run: |
          ## CHECKSUM GENERATION SCRIPT
          shopt -s extglob
          echo "### Checksums" > ${{ github.workspace }}/CHECKSUMS.txt
          for file in ${{ github.workspace }}/**/@(*.pkg|*.exe|*.deb|*.zip); do
            echo "    ${file##*/}: $(sha256sum "${file}" | cut -d " " -f 1)" >> ${{ github.workspace }}/CHECKSUMS.txt
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          draft: false
          prerelease: ${{ contains(steps.metadata.outputs.version, 'rc') || contains(steps.metadata.outputs.version, 'beta') }}
          tag_name: ${{ steps.metadata.outputs.version }}
          name: "${{ env.PLUGIN_NAME }} ${{ steps.metadata.outputs.version }}"
          body_path: ${{ github.workspace }}/CHECKSUMS.txt
          files: |
            ${{ github.workspace }}/**/*.zip
            ${{ github.workspace }}/**/*.exe
            ${{ github.workspace }}/**/*.deb
            ${{ github.workspace }}/**/*.pkg
