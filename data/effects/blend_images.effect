uniform float4x4 ViewProj;

uniform texture2d image;      // input RGBA
uniform texture2d blendimage; // input RGBA to blend
uniform float blendFactor;    // how much to blend from each image
uniform float xOffset;
uniform float yOffset;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

/**
  * Kawase High Pass Filter
  */
float4 KawaseHighPass(VertDataOut v_in)
{
	float4 sum = float4(0.0, 0.0, 0.0, 0.0);
	sum += image.Sample(textureSampler, v_in.uv + float2( xOffset,  yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset,  yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2( xOffset, -yOffset));
	sum += image.Sample(textureSampler, v_in.uv + float2(-xOffset, -yOffset));
	sum = image.Sample(textureSampler, v_in.uv) - sum * 0.25;
	return sum;
}

float4 PSBlend(VertDataOut v_in) : TARGET
{
	float4 imageRGBA = image.Sample(textureSampler, v_in.uv);
  // Add high pass filter back to the blend image because the blend image is usually blurry
	float4 blendimageRGBA = blendimage.Sample(textureSampler, v_in.uv) + KawaseHighPass(v_in);
	return imageRGBA * (1.0 - blendFactor) + blendimageRGBA * blendFactor;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSBlend(v_in);
	}
}

